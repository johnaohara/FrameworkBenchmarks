package io.quarkus.benchmark.resource.hibernate.reactive;

import io.quarkus.benchmark.model.hibernate.reactive.World;
import io.quarkus.benchmark.repository.hibernate.reactive.WorldRepositoryCompletionStage;
import io.quarkus.benchmark.repository.hibernate.reactive.WorldRepositoryMutiny;
import io.quarkus.vertx.web.Route;
import io.smallrye.mutiny.Uni;
import io.vertx.ext.web.RoutingContext;
import org.hibernate.FlushMode;
import org.hibernate.reactive.mutiny.Mutiny;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.ThreadLocalRandom;


@ApplicationScoped
public class CompletionStageDbResource extends BaseResource {

    @Inject
    WorldRepositoryCompletionStage worldRepository;

    @Route(path = "dbCompletion")
    public void db(RoutingContext rc) {
        randomWorld().thenAccept(world -> sendJson(rc, world));

//                ((world, t) -> sendJson(rc, world)
//                , t -> handleFail(rc, t));
    }

    private CompletionStage<World> randomWorld() {
        int i = randomWorldNumber();
        return worldRepository.find(i);
    }

    private int randomWorldNumber() {
        return 1 + ThreadLocalRandom.current().nextInt(10000);
    }

    /**
     * Also according to benchmark requirements, except that in this special case
     * of the update test we need to ensure we'll actually generate an update operation:
     * for this we need to generate a random number between 1 to 10000, but different
     * from the current field value.
     * @param previousRead
     * @return
     */
    private int randomWorldNumber(final int previousRead) {
        //conceptually split the random space in those before previousRead,
        //and those after: this approach makes sure to not affect the random characteristics.
        final int trueRandom = ThreadLocalRandom.current().nextInt(9999) + 2;
        if (trueRandom<=previousRead) {
            //all figures equal or before the current field read need to be shifted back by one
            //so to avoid hitting the same number while not affecting the distribution.
            return trueRandom - 1;
        }
        else {
            //Those after are generated by taking the generated value 2...10000 as is.
            return trueRandom;
        }
    }

    private int parseQueryCount(String textValue) {
        if (textValue == null) {
            return 1;
        }
        int parsedValue;
        try {
            parsedValue = Integer.parseInt(textValue);
        } catch (NumberFormatException e) {
            return 1;
        }
        return Math.min(500, Math.max(1, parsedValue));
    }
}